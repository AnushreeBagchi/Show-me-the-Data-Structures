1. Least Recently used cache
Explanation- 
    I made use of ordered dictionary in python. This remembers the order in  which the keys are inserted.
    The set method first checks whether it reached the max size, if so then deletes the first inserted record.
    The get method, returns the value for the key if present or else returns -1. 
    Also the get method deletes the value and adds it again to move it up in the cache
Time Complexity: Time complexity for Dictionary lookup is constant O(1). Hence the overall time complexity will be O(1)
Space Complexity: Let there be n number of key value pair in the cache. Then the space requred will be 2n.
                    So the space complexity will be O(n)
2. File Recursion 
Explanation:
    Here in this program, first I have checked whether the path given is a file and ending with given suffix. If so then appending it to the list.
    If the path is a directory, then listing all the contents of the directory and calling the recursive function again.
Time complexity: 
    Let 'n' be the depth of the subdirectories and 'm' be the average no of files in a directory.
    Then the time complexity will be O(nm)
Space complexity:
    Let n be the depth of the directory. Since Each recursive call will occupy a stack space. so space required will be n.
    Also let m be the number of files found which we are appending to files list. 
    So the tome complexity will be O(n+m)

3. Huffman Coding:
Explanation: 
    a) First I found out the frequency of all the characters in the string.
    b) Then created a list with letters and its frequency
    c) Then in the huffman tree function, getting the 2 nodes with lowest frequency. Adding both and creating a new node.
       Also appending '0' code to the first node and '1' to the second node. This 2 nodes is replaced in the list with the new node created.
        This is continues till the list have just one record(recursion). This creates the huffman_tree
    d) To get the code appending codes from each node.
    e) To get the decoded message, a lookup is made on the code_dict
Time complexity: Let n be the number of distinct alphabets at the leaf. There will be O(n) time required for each iteration and O(log n) required for sorting and finding the lowest probable nodes.
    So the time complexity will be O(nlogn)
Space complexity : Let tree have n nodes and let m be the length of decoded text. 
    Space complexity will be O(n+m)

4. Active directory:
Explanation: 
    Here I have used recursion to get whether the user is in the group. I am traversing the tree and checking in each level whether user is present. As soon as we get the user, returning True.
Time complexity: Let  'n' be the depth of the directory and 'm' be the average number of directory in a group, then complexity will be O(nm)
Space complexity:Let n be the depth of the directory. Since Each recursive call will occupy a stack space. so space required will be n.
    So the space complexity will be O(n)


5. Blockchain
Explanation:
    Here I have created a linkedlist with default head, tail and no_blocks.
    The append method checks if linkedlist.head is present. If not the adds a block to the linkedlist.head. If present then appends the block to the tail.
    The size method will give number of blocks in the linkedlist
Time Complexity: 
    The time complexity to append a block to the linkedlist with my implementation will be O(1). For searching it will O(n)
Space complexity : Let n be the number of blocks then space complexity will be O(n)

6. Union and Intersection
Explanation Union: For union created an empty hashmap. Then I have traversed through bth the lists. 
                            If the value is not present in the hashmap then appending the value to the result linkedlist.
Explanation Intersection: For this I have created 2 hashmaps. First I traversed through linkedlist1 and added all the values to hashmap1.
                        Then traversed through linkedlist2, if the value is present in hashmap1 and not in hashmap2(to remove duplicate) then adding the value to result linkedlist

Time complexity: Let n be the number of items in linkedlist1 and m be the numberof items in linkedlist2.
                The time complexity of get and set in hashmap is O(1). Then the time complexity for both union and intersection will be linear ie O(n)
Space complexity:
    If n be the number of keys value pair in a dictionary, then space complexity of hashmap will be O(n)
    Let n be the number of nodes in llist1 and m be nodes in llist2 . The space complexity will be O(n+m)

    